name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            output_name: MPV-Playlist-Player-Pro.exe
            artifact_name: windows-build
          - os: ubuntu-latest
            output_name: MPV-Playlist-Player-Pro.bin
            artifact_name: linux-build
          - os: macos-latest
            output_name: MPV-Playlist-Player-Pro.app
            artifact_name: macos-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y patchelf ccache

      - name: Install dependencies with uv
        run: |
          uv sync

      - name: Build with Nuitka (Windows)
        if: runner.os == 'Windows'
        timeout-minutes: 45
        continue-on-error: false
        run: |
          echo "Starting Nuitka compilation for Windows..."
          uv run nuitka --onefile --windows-console-mode=disable --enable-plugin=tk-inter --nofollow-import-to=customtkinter,ttkbootstrap --assume-yes-for-downloads main.py
          echo "Nuitka compilation completed"

      - name: Build with Nuitka (Linux)
        if: runner.os == 'Linux'
        timeout-minutes: 45
        continue-on-error: false
        run: |
          echo "Starting Nuitka compilation for Linux..."
          uv run nuitka --onefile --enable-plugin=tk-inter --nofollow-import-to=customtkinter,ttkbootstrap --assume-yes-for-downloads main.py
          echo "Nuitka compilation completed"

      - name: Build with Nuitka (macOS)
        if: runner.os == 'macOS'
        timeout-minutes: 45
        continue-on-error: false
        run: |
          echo "Starting Nuitka compilation for macOS..."
          uv run nuitka --standalone --macos-create-app-bundle --enable-plugin=tk-inter --nofollow-import-to=customtkinter,ttkbootstrap --macos-app-name="MPV Playlist Player Pro" --assume-yes-for-downloads main.py
          echo "Nuitka compilation completed"

      - name: Comprehensive directory listing (Debug)
        shell: bash
        run: |
          echo "========================================"
          echo "FULL DIRECTORY STRUCTURE AFTER BUILD"
          echo "========================================"
          echo ""
          echo "=== Root directory (first 50 files) ==="
          ls -lah | head -50
          echo ""
          echo "=== Searching for .exe files ==="
          find . -name "*.exe" -type f 2>/dev/null || echo "No .exe files found"
          echo ""
          echo "=== Searching for .bin files ==="
          find . -name "*.bin" -type f 2>/dev/null || echo "No .bin files found"
          echo ""
          echo "=== Searching for .app directories ==="
          find . -name "*.app" -type d 2>/dev/null || echo "No .app directories found"
          echo ""
          echo "=== build/ directory ==="
          if [ -d "build" ]; then
            ls -lahR build/ | head -100
          else
            echo "build/ directory does not exist"
          fi
          echo ""
          echo "=== main.dist/ directory ==="
          if [ -d "main.dist" ]; then
            ls -lahR main.dist/ | head -100
          else
            echo "main.dist/ directory does not exist"
          fi
          echo ""
          echo "=== main.build/ directory ==="
          if [ -d "main.build" ]; then
            ls -lah main.build/ | head -50
          else
            echo "main.build/ directory does not exist"
          fi

      - name: Locate and move build artifact
        shell: bash
        run: |
          mkdir -p dist
          FOUND=0

          if [ "${{ runner.os }}" == "macOS" ]; then
            echo "Searching for macOS app bundle..."
            SEARCH_PATHS=("main.app" "main.dist/main.app" "build/main.app" "main.build/main.app")
            for path in "\${SEARCH_PATHS[@]}"; do
              if [ -d "\$path" ]; then
                echo "✅ Found main.app at: \$path"
                cp -r "\$path" dist/
                FOUND=1
                break
              fi
            done
          elif [ "${{ runner.os }}" == "Windows" ]; then
            echo "Searching for Windows executable..."
            SEARCH_PATHS=("main.exe" "main.dist/main.exe" "build/main.exe" "main.build/main.exe")
            for path in "\${SEARCH_PATHS[@]}"; do
              if [ -f "\$path" ]; then
                echo "✅ Found main.exe at: \$path"
                cp "\$path" dist/
                FOUND=1
                break
              fi
            done
          else
            echo "Searching for Linux binary..."
            SEARCH_PATHS=("main.bin" "main.dist/main.bin" "build/main.bin" "main.build/main.bin")
            for path in "\${SEARCH_PATHS[@]}"; do
              if [ -f "\$path" ]; then
                echo "✅ Found main.bin at: \$path"
                cp "\$path" dist/
                FOUND=1
                break
              fi
            done
          fi

          if [ \$FOUND -eq 0 ]; then
            echo "❌ Build artifact not found in any expected location"
            echo "Please check the 'Comprehensive directory listing' step above"
            exit 1
          fi

      - name: Make binary executable (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            chmod -R +x dist/main.app/Contents/MacOS/ || true
          else
            chmod +x dist/main.bin || true
          fi

      - name: Package artifacts
        shell: bash
        run: |
          cd dist
          if [ "${{ runner.os }}" == "macOS" ]; then
            zip -r ${{ matrix.output_name }}.zip main.app
            rm -rf main.app
          elif [ "${{ runner.os }}" == "Windows" ]; then
            mv main.exe ${{ matrix.output_name }} || cp main.exe ${{ matrix.output_name }}
          else
            mv main.bin ${{ matrix.output_name }} || cp main.bin ${{ matrix.output_name }}
          fi
          cd ..
          echo "Final dist/ contents:"
          ls -lah dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/*
          if-no-files-found: error
          retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifact structure
        run: ls -R artifacts

      - name: Prepare release files
        run: |
          mkdir -p release-files
          find artifacts -type f -exec cp {} release-files/ \;
          ls -lah release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
