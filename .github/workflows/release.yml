name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            output_name: MPV-Playlist-Player-Pro.exe
            artifact_name: windows-build
            binary_name: main.exe
          - os: ubuntu-latest
            output_name: MPV-Playlist-Player-Pro.bin
            artifact_name: linux-build
            binary_name: main.bin
          - os: macos-latest
            output_name: MPV-Playlist-Player-Pro.app
            artifact_name: macos-build
            binary_name: main.app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies with uv
        run: |
          uv sync

      - name: Build with Nuitka (Windows)
        if: runner.os == 'Windows'
        timeout-minutes: 45
        run: |
          uv run nuitka --onefile --windows-console-mode=disable --enable-plugin=tk-inter --include-package-data=customtkinter --include-package-data=ttkbootstrap --output-filename=main.exe main.py

      - name: Build with Nuitka (Linux)
        if: runner.os == 'Linux'
        timeout-minutes: 45
        run: |
          uv run nuitka --onefile --enable-plugin=tk-inter --include-package-data=customtkinter --include-package-data=ttkbootstrap --output-filename=main.bin main.py

      - name: Build with Nuitka (macOS)
        if: runner.os == 'macOS'
        timeout-minutes: 45
        run: |
          uv run nuitka --standalone --macos-create-app-bundle --enable-plugin=tk-inter --include-package-data=customtkinter --include-package-data=ttkbootstrap --macos-app-name="MPV Playlist Player Pro" main.py

      - name: List directory contents (Debug)
        shell: bash
        run: |
          echo "=== Root directory ==="
          ls -la
          echo ""
          echo "=== Looking for build artifacts ==="
          if [ -d "build" ]; then
            echo "build/ directory exists:"
            ls -laR build/
          fi
          if [ -d "main.dist" ]; then
            echo "main.dist/ directory exists:"
            ls -laR main.dist/
          fi

      - name: Locate and move build artifact
        shell: bash
        run: |
          mkdir -p dist

          if [ "${{ runner.os }}" == "macOS" ]; then
            # macOS creates main.app in root or main.dist/
            if [ -d "main.app" ]; then
              echo "✅ Found main.app in root directory"
              mv main.app dist/
            elif [ -d "main.dist/main.app" ]; then
              echo "✅ Found main.app in main.dist/"
              mv main.dist/main.app dist/
            else
              echo "❌ Build failed - main.app not found"
              exit 1
            fi
          elif [ "${{ runner.os }}" == "Windows" ]; then
            # Windows creates main.exe in root directory with --onefile
            if [ -f "main.exe" ]; then
              echo "✅ Found main.exe in root directory"
              mv main.exe dist/
            elif [ -f "build/main.exe" ]; then
              echo "✅ Found main.exe in build/"
              mv build/main.exe dist/
            else
              echo "❌ Build failed - main.exe not found"
              exit 1
            fi
          else
            # Linux creates main.bin in root directory with --onefile
            if [ -f "main.bin" ]; then
              echo "✅ Found main.bin in root directory"
              mv main.bin dist/
            elif [ -f "build/main.bin" ]; then
              echo "✅ Found main.bin in build/"
              mv build/main.bin dist/
            else
              echo "❌ Build failed - main.bin not found"
              exit 1
            fi
          fi

      - name: Make binary executable (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            chmod -R +x dist/main.app/Contents/MacOS/ || true
          else
            chmod +x dist/main.bin
          fi

      - name: Package artifacts
        shell: bash
        run: |
          cd dist
          if [ "${{ runner.os }}" == "macOS" ]; then
            zip -r ${{ matrix.output_name }}.zip main.app
            rm -rf main.app
          elif [ "${{ runner.os }}" == "Windows" ]; then
            mv main.exe ${{ matrix.output_name }}
          else
            mv main.bin ${{ matrix.output_name }}
          fi
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/*
          if-no-files-found: error
          retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifact structure
        run: ls -R artifacts

      - name: Prepare release files
        run: |
          mkdir -p release-files
          find artifacts -type f -exec cp {} release-files/ \;
          ls -lah release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
